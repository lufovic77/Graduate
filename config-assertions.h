// assertions checking the validity of the config.h

#define MACRO_ASSERT(x) extern int __ma_dummy[0];  // minor fix for clang, where "int a[0]" is permitted,

#define MACRO_IF_THEN(a, b) MACRO_ASSERT((!(a))||(b))

#define NOGRAPHITE true

//MACRO_IF_THEN(LOG_ALGORITHM==LOG_SERIAL, CC_ALG==SILO)
//MACRO_IF_THEN(LOG_ALGORITHM==LOG_TAURUS, NUM_LOGGER==1)  // currently implement a serial logger
MACRO_IF_THEN(LOG_ALGORITHM == LOG_SERIAL, NUM_LOGGER == 1)
MACRO_IF_THEN(USE_LOCKTABLE, LOG_ALGORITHM==LOG_TAURUS || LOG_ALGORITHM == LOG_NO || LOG_ALGORITHM == LOG_SERIAL || LOG_ALGORITHM == LOG_BATCH)
MACRO_IF_THEN(LOG_ALGORITHM==LOG_TAURUS, NUM_LOGGER<=32)
MACRO_IF_THEN(LOG_ALGORITHM==LOG_BATCH, LOG_TYPE==LOG_DATA)
MACRO_IF_THEN(LOG_ALGORITHM==LOG_TAURUS, ISOLATION_LEVEL == SERIALIZABLE)
MACRO_IF_THEN(LOG_ALGORITHM==LOG_SERIAL && CC_ALG == SILO, USE_LOCKTABLE==false)
//MACRO_IF_THEN(LOG_ALGORITHM==LOG_SERIAL && CC_ALG == NO_WAIT, USE_LOCKTABLE==true)
MACRO_IF_THEN(PROCESS_DEPENDENCY_LOGGER, PER_WORKER_RECOVERY==false) // we need seperate queues (or not?)
MACRO_IF_THEN(PROCESS_DEPENDENCY_LOGGER, DECODE_AT_WORKER==false) // decoding must happen at the logger
//MACRO_IF_THEN(PROCESS_DEPENDENCY_LOGGER, CC_ALG==NO_WAIT) // code written for NO_WAIT
MACRO_IF_THEN(PROCESS_DEPENDENCY_LOGGER, LOG_ALGORITHM==LOG_TAURUS && LOG_TYPE==LOG_DATA && WORKLOAD==TPCC)
//MACRO_IF_THEN(LOG_ALGORITHM==LOG_NO && CC_ALG==SILO, USE_LOCKTABLE==false)
MACRO_ASSERT(NOGRAPHITE==true)
//MACRO_ASSERT(LOG_NO_FLUSH==false)
MACRO_ASSERT(COMPRESS_LSN_LT==false)

MACRO_IF_THEN(CC_ALG==SILO, ATOMIC_WORD==true);

MACRO_IF_THEN(UPDATE_SIMD, LOG_ALGORITHM==LOG_TAURUS)
MACRO_IF_THEN(LOG_ALGORITHM==LOG_PLOVER, CC_ALG==NO_WAIT || CC_ALG == MVCC)
MACRO_IF_THEN(LOG_ALGORITHM==LOG_PLOVER, USE_LOCKTABLE==false)
MACRO_IF_THEN(LOG_ALGORITHM==LOG_PLOVER, LOG_TYPE==LOG_DATA)

MACRO_IF_THEN(TAURUS_CHUNK, LOG_ALGORITHM==LOG_TAURUS)
MACRO_IF_THEN(TAURUS_CHUNK, PER_WORKER_RECOVERY)
MACRO_IF_THEN(PER_WORKER_RECOVERY, TAURUS_CHUNK)

#define CHECKED
